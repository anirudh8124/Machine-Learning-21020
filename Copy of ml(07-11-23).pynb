{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Skw8rywldMIZwwL2yEED7h7HgJSzCzPd","timestamp":1699288039968}],"authorship_tag":"ABX9TyOt+BAQC/0naJmdzGP924DO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FAu7q-yFbTt7","executionInfo":{"status":"ok","timestamp":1699287877538,"user_tz":-330,"elapsed":408,"user":{"displayName":"Anirudh S","userId":"17490394436853575963"}},"outputId":"cac025c4-a6c1-4804-a21e-26597afdebab"},"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of activation_maps and label_pixels is:\n"," (16384, 13) (16384, 1)\n","(16384, 13) (16384,)\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 16384 entries, 0 to 16383\n","Data columns (total 14 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   0       16384 non-null  float64\n"," 1   1       16384 non-null  float64\n"," 2   2       16384 non-null  float64\n"," 3   3       16384 non-null  float64\n"," 4   4       16384 non-null  float64\n"," 5   5       16384 non-null  float64\n"," 6   6       16384 non-null  float64\n"," 7   7       16384 non-null  float64\n"," 8   8       16384 non-null  float64\n"," 9   9       16384 non-null  float64\n"," 10  10      16384 non-null  float64\n"," 11  11      16384 non-null  float64\n"," 12  12      16384 non-null  float64\n"," 13  label   16384 non-null  uint8  \n","dtypes: float64(13), uint8(1)\n","memory usage: 1.6 MB\n"]}],"source":["import numpy as np\n","import pandas as pd\n","from matplotlib import pyplot as plt\n","from sklearn import preprocessing as prepro\n","\n","# Load the data\n","activation_maps = np.load('/content/activation_maps_lines_image52_pixel (1).npy')\n","label_pixels = np.load('/content/activation_maps_lines_image52_labelpixel.npy')\n","print(\"The shape of activation_maps and label_pixels is:\\n\", activation_maps.shape, label_pixels.shape)\n","\n","# Reshape the data (pixels x features)\n","total_pixels = activation_maps.shape[0]   # Total number of pixels\n","num_features = activation_maps.shape[1]  # Number of features for each pixel\n","X_reshaped = activation_maps.reshape(total_pixels, num_features)\n","y_reshaped = label_pixels.reshape(total_pixels)  # Assuming y is your pixel-wise label mask\n","print(X_reshaped.shape, y_reshaped.shape)\n","\n","# Create a DataFrame from the numpy arrays\n","activation_maps_df = pd.DataFrame(activation_maps, columns=np.arange(0, 13))\n","activation_maps_df['label'] = label_pixels  # Adding label column into the activation_maps_df dataset\n","activation_maps_df.info()\n","\n"]},{"cell_type":"code","source":["# Question A1: Scatter plot of two features\n","feature_11 = activation_maps_df[11]\n","feature_12 = activation_maps_df[12]\n","plt.scatter(feature_11, feature_12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"6EJ7SQl_bpOZ","executionInfo":{"status":"ok","timestamp":1699287897414,"user_tz":-330,"elapsed":1134,"user":{"displayName":"Anirudh S","userId":"17490394436853575963"}},"outputId":"c237d4a7-1d83-4ebc-f10a-6a76956bbddf"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Question A2: Linear Regression\n","from sklearn import datasets, linear_model\n","from sklearn.metrics import mean_squared_error\n","from sklearn.model_selection import train_test_split\n","\n","# Prepare data for regression\n","independent_var = pd.DataFrame(activation_maps_df[11])\n","dependent_var = pd.DataFrame(activation_maps_df['label'])\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(independent_var, dependent_var, test_size=0.2, random_state=42)\n","\n","# Initialize and train the linear regression model\n","lin_reg = linear_model.LinearRegression()\n","lin_reg.fit(X_train, y_train)\n","\n","# Make predictions\n","lin_reg_predictions = lin_reg.predict(X_test)\n","\n","# Calculate mean squared error\n","print(\"Mean Squared Error: %.2f\" % mean_squared_error(y_test, lin_reg_predictions))\n","\n","# Plot the results\n","plt.scatter(X_test, y_test, color=\"red\")\n","plt.plot(X_test, lin_reg_predictions, color=\"black\", linewidth=3)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"Ewj2k0RIc6J3","executionInfo":{"status":"ok","timestamp":1699287924043,"user_tz":-330,"elapsed":1352,"user":{"displayName":"Anirudh S","userId":"17490394436853575963"}},"outputId":"dabfaf5c-9748-409a-9e1f-27f5644e0689"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error: 13464.25\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Question A3: Calculate theta_1 and theta_0 for linear regression\n","independent_mean = independent_var.mean()\n","dependent_mean = dependent_var.mean()\n","\n","# Compute theta_1 using the formula\n","theta_1 = np.sum((independent_var - independent_mean) * (dependent_var - dependent_mean)) / np.sum((independent_var - independent_mean) ** 2)\n","theta_0 = dependent_mean - theta_1 * independent_mean\n","\n","print(\"The value of theta_1:\", theta_1)\n","print(\"The value of theta_0:\", theta_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PQQU4Y02c6Rn","executionInfo":{"status":"ok","timestamp":1699287944318,"user_tz":-330,"elapsed":462,"user":{"displayName":"Anirudh S","userId":"17490394436853575963"}},"outputId":"718bb6ce-3a08-46bb-9b98-8e2d416f2a8c"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["The value of theta_1: 11       0.0\n","label    NaN\n","dtype: float64\n","The value of theta_0: 11      NaN\n","label   NaN\n","dtype: float64\n"]}]},{"cell_type":"code","source":["# Question A4: Logistic Regression\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","\n","# Prepare data for logistic regression\n","features = activation_maps_df.iloc[:, :13]\n","labels = activation_maps_df.iloc[:, 13]\n","\n","# Split the data\n","features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n","\n","# Initialize and train the logistic regression model\n","logistic_reg = LogisticRegression()\n","logistic_reg.fit(features_train, labels_train)\n","\n","# Make predictions\n","logistic_predictions = logistic_reg.predict(features_test)\n","\n","# Calculate accuracy and mean squared error\n","logistic_accuracy = accuracy_score(labels_test, logistic_predictions)\n","logistic_mse = mean_squared_error(labels_test, logistic_predictions)\n","print(\"Accuracy: {:.2f}%\".format(logistic_accuracy * 100))\n","print(\"Mean Squared Error: %.2f\" % logistic_mse)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DGamFsQqc6UM","executionInfo":{"status":"ok","timestamp":1699287960992,"user_tz":-330,"elapsed":1121,"user":{"displayName":"Anirudh S","userId":"17490394436853575963"}},"outputId":"af11e7c6-9c99-475c-8616-db0da8e98ad1"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 56.12%\n","Mean Squared Error: 0.55\n"]}]},{"cell_type":"code","source":["# Question A5: K-Nearest Neighbors and Decision Tree Regressor\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.tree import DecisionTreeRegressor\n","\n","# Prepare data for KNN\n","X_train_knn, X_test_knn, y_train_knn, y_test_knn = train_test_split(feature_11, feature_12, test_size=0.2, random_state=42)\n","X_train_knn = X_train_knn.values.reshape(-1, 1)\n","X_test_knn = X_test_knn.values.reshape(-1, 1)\n","\n","# Initialize and train the KNN regressor\n","knn_neighbors = 3\n","knn_regressor = KNeighborsRegressor(n_neighbors=knn_neighbors)\n","knn_regressor.fit(X_train_knn, y_train_knn)\n","\n","# Make predictions using KNN\n","y_pred_knn = knn_regressor.predict(X_test_knn)\n","\n","# Calculate mean squared error for KNN\n","mse_knn = mean_squared_error(y_test_knn, y_pred_knn)\n","print(\"Mean Squared Error (KNN):\", mse_knn)\n","\n","# Prepare data for decision tree\n","X_train_tree, X_test_tree, y_train_tree, y_test_tree = train_test_split(feature_11, feature_12, test_size=0.2, random_state=42)\n","X_train_tree = X_train_tree.values.reshape(-1, 1)\n","X_test_tree = X_test_tree.values.reshape(-1, 1)\n","\n","# Initialize and train the decision tree regressor\n","tree_regressor = DecisionTreeRegressor(random_state=42)\n","tree_regressor.fit(X_train_tree, y_train_tree)\n","\n","# Make predictions using the decision tree\n","y_pred_tree = tree_regressor.predict(X_test_tree)\n","\n","# Calculate mean squared error for the decision tree\n","mse_tree = mean_squared_error(y_test_tree, y_pred_tree)\n","print(\"Mean Squared Error (Decision Tree):\", mse_tree)\n","\n","# Predict a single point using KNN\n","sample_point = activation_maps_df.iloc[7, :13].values.reshape(-1, 1)\n","predicted_value_knn = knn_regressor.predict(sample_point)\n","print(\"Predicted Value for {}: {}\".format(sample_point, predicted_value_knn))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VG0uFDY6c6Wk","executionInfo":{"status":"ok","timestamp":1699287982256,"user_tz":-330,"elapsed":1605,"user":{"displayName":"Anirudh S","userId":"17490394436853575963"}},"outputId":"220d2eaf-e2a1-4ed5-eea2-a47d1fa00cc4"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (KNN): 1.0063707308388084e-07\n","Mean Squared Error (Decision Tree): 9.842085359383483e-08\n","Predicted Value for [[0.01960784]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.        ]\n"," [0.0745098 ]]: [0.07320261 0.0745098  0.0745098  0.0745098  0.0745098  0.0745098\n"," 0.0745098  0.0745098  0.0745098  0.0745098  0.0745098  0.0745098\n"," 0.07320261]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"jJJhFRZ0c6Zh"},"execution_count":null,"outputs":[]}]}